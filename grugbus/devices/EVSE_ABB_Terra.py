#!/usr/bin/python
# -*- coding: utf-8 -*-

#
#   Register data from datasheet PDF
#   Extracted from EVSE_ABB_Terra.csv
#

from grugbus.registers import *

def MakeRegisters():
    return (
    RegU32( (3, 6, 16), 16640, 1, 'rwr_current_limit', 0.001, 'A' , 'float', 3, 'Set Charging Current Limit' , 'Since the charger uses an internal algorithm for load management, the current limit which is set may not be same as charger’s load management decision. For this purpose, read back 400E register.\nCharging session will enter Pause state when the current limit is less than 6A. After that when current limit is set above 6A, charging session will be resumed. The choice of 6A is derived from IEC 61851-1.'),
    RegU16( (3, 6, 16), 16643, 1, 'rwr_lock_socket'  ,  None, None, 'int'  , 0, 'Lock Unlock Socket Cable'   , '0 – Unlock\n1 – Lock\nMake sure  no ongoing charging session prior to unlocking.'                                                                                                                                                                                                                                                                                                                                  ),
    RegU16( (3, 6, 16), 16645, 1, 'rwr_stop_charging',  None, None, 'int'  , 0, 'Start Stop Charging Session', '0 – Start\n1 – Stop'                                                                                                                                                                                                                                                                                                                                                                                               ),
    RegU16( (3, 6, 16), 16646, 1, 'rwr_comm_timeout' ,     1, 's' , 'float', 0, 'Communication timeout'      , 'Charger decides modbus communication is lost when no messages received during this time interval'                                                                                                                                                                                                                                                                                                                  ),
    RegU16(          4, 16384, 4, 'serial_number'    ,  None, None, 'int'  , 0, 'Serial Number'              , ''                                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16388, 1, 'firmware_version' ,  None, None, 'int'  , 0, 'Firmware version'           , ''                                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16390, 1, 'hard_max_current' , 0.001, 'A' , 'float', 3, 'User Settable Max Current'  , 'Maximum current supported by hardware, settable by Terra Config app'                                                                                                                                                                                                                                                                                                                                               ),
    RegU32(          4, 16392, 1, 'error_code'       ,  None, None, 'int'  , 0, 'Error Code'                 , '0 – No error\nOther values\xa0: see troubleshooting guide'                                                                                                                                                                                                                                                                                                                                                         ),
    RegU32(          4, 16394, 1, 'socket_state'     ,  None, None, 'int'  , 0, 'Socket Lock State'          , 'OR-value of\xa0:\n0x001 – Cable connected to charging station\n0x010 – Cable locked in charging station\n0x100 – Cable connected to EV'                                                                                                                                                                                                                                                                            ),
    RegU32(          4, 16396, 1, 'charge_state'     ,  None, None, 'int'  , 0, 'Charging State'             , ''                                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16398, 1, 'current_limit'    , 0.001, 'A' , 'float', 3, 'Charging Current Limit'     , 'Current limit chosen by the charger based on the various condition which include the 4100h register value.'                                                                                                                                                                                                                                                                                                        ),
    RegU32(          4, 16400, 1, 'current'          , 0.001, 'A' , 'float', 3, 'Charging Current L1'        , 'Measured current'                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16402, 1, 'current_2'        , 0.001, 'A' , 'float', 3, 'Charging Current L2'        , 'Measured current'                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16404, 1, 'current_3'        , 0.001, 'A' , 'float', 3, 'Charging Current L3'        , 'Measured current'                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16406, 1, 'voltage'          ,   0.1, 'V' , 'float', 1, 'Voltage L1'                 , 'Measured voltage'                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16408, 1, 'voltage_2'        ,   0.1, 'V' , 'float', 1, 'Voltage L2'                 , 'Measured voltage'                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16410, 1, 'voltage_3'        ,   0.1, 'V' , 'float', 1, 'Voltage L3'                 , 'Measured voltage'                                                                                                                                                                                                                                                                                                                                                                                                  ),
    RegU32(          4, 16412, 1, 'active_power'     ,     1, 'W' , 'float', 0, 'Active Power'               , 'Measured active power'                                                                                                                                                                                                                                                                                                                                                                                             ),
    RegU32(          4, 16414, 1, 'energy'           , 0.001, 'kWh', 'float', 3, 'Energy Delivered'           , 'Measured transferred energy of the current charging session'                                                                                                                                                                                                                                                                                                                                                       ),
    RegU16(          4, 16416, 1, 'comm_timeout'     ,     1, 's' , 'float', 0, 'Communication timeout'      , 'Readback of 0x4106'                                                                                                                                                                                                                                                                                                                                                                                                ))
if __name__ == "__main__":
    MakeRegisters()

